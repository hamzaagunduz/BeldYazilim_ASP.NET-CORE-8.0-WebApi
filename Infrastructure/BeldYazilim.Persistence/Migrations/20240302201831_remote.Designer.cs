// <auto-generated />
using System;
using BeldYazilim.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeldYazilim.Persistence.Migrations
{
    [DbContext(typeof(BeldYazilimContext))]
    [Migration("20240302201831_remote")]
    partial class remote
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeldYazilim.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("AppUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserID"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfirmCode")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserID");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleID"));

                    b.Property<int>("ArticleAuthorID")
                        .HasColumnType("int");

                    b.Property<string>("BigImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleID");

                    b.HasIndex("ArticleAuthorID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ArticleAuthor", b =>
                {
                    b.Property<int>("ArticleAuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleAuthorID"));

                    b.Property<int>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleAuthorID");

                    b.HasIndex("AppUserID")
                        .IsUnique();

                    b.ToTable("ArticleAuthors");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ArticleCategoryLink", b =>
                {
                    b.Property<int>("ArticleCategoryLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleCategoryLinkID"));

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("MainCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoryID")
                        .HasColumnType("int");

                    b.HasKey("ArticleCategoryLinkID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("MainCategoryID");

                    b.HasIndex("SubcategoryID");

                    b.ToTable("ArticleCategoryLinks");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ArticleComment", b =>
                {
                    b.Property<int>("ArticleCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleCommentID"));

                    b.Property<int?>("AppUserID")
                        .HasColumnType("int");

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleCommentID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("ArticleID");

                    b.ToTable("ArticleComments");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.MainCategory", b =>
                {
                    b.Property<int>("MainCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MainCategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MainCategoryID");

                    b.ToTable("MainCategories");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ProductSeller", b =>
                {
                    b.Property<int>("ProductSellerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSellerID"));

                    b.Property<int>("Profit")
                        .HasColumnType("int");

                    b.Property<int>("TaxNumber")
                        .HasColumnType("int");

                    b.HasKey("ProductSellerID");

                    b.ToTable("ProductSellers");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ProductShop", b =>
                {
                    b.Property<int>("ProductShopID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductShopID"));

                    b.Property<string>("ProducyShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductShopID");

                    b.ToTable("ProductShops");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.Subcategory", b =>
                {
                    b.Property<int>("SubCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryID"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryID");

                    b.HasIndex("MainCategoryID");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.Article", b =>
                {
                    b.HasOne("BeldYazilim.Domain.Entities.ArticleAuthor", "ArticleAuthor")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleAuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleAuthor");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ArticleAuthor", b =>
                {
                    b.HasOne("BeldYazilim.Domain.Entities.AppUser", "AppUser")
                        .WithOne("ArticleAuthor")
                        .HasForeignKey("BeldYazilim.Domain.Entities.ArticleAuthor", "AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ArticleCategoryLink", b =>
                {
                    b.HasOne("BeldYazilim.Domain.Entities.Article", "Article")
                        .WithMany("ArticleCategoryLinks")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeldYazilim.Domain.Entities.MainCategory", "MainCategory")
                        .WithMany("ArticleCategoryLinks")
                        .HasForeignKey("MainCategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BeldYazilim.Domain.Entities.Subcategory", "Subcategory")
                        .WithMany("ArticleCategoryLinks")
                        .HasForeignKey("SubcategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("MainCategory");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ArticleComment", b =>
                {
                    b.HasOne("BeldYazilim.Domain.Entities.AppUser", "CommentedBy")
                        .WithMany("Comments")
                        .HasForeignKey("AppUserID");

                    b.HasOne("BeldYazilim.Domain.Entities.Article", "Article")
                        .WithMany("ArticleComments")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("CommentedBy");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.Subcategory", b =>
                {
                    b.HasOne("BeldYazilim.Domain.Entities.MainCategory", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("ArticleAuthor")
                        .IsRequired();

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.Article", b =>
                {
                    b.Navigation("ArticleCategoryLinks");

                    b.Navigation("ArticleComments");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.ArticleAuthor", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.MainCategory", b =>
                {
                    b.Navigation("ArticleCategoryLinks");
                });

            modelBuilder.Entity("BeldYazilim.Domain.Entities.Subcategory", b =>
                {
                    b.Navigation("ArticleCategoryLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
