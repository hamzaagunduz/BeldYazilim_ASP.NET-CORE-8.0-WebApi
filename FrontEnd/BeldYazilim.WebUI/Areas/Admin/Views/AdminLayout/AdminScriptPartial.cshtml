﻿<div class="menu-overlay"></div>


<!-- jQuery  -->

<script src="~/Admin/vertical/assets/js/bootstrap.bundle.min.js"></script>
<script src="~/Admin/vertical/assets/js/metismenu.min.js"></script>
<script src="~/Admin/vertical/assets/js/waves.js"></script>
<script src="~/Admin/vertical/assets/js/simplebar.min.js"></script>

<!-- App js -->
<script src="~/ckeditor5-build-classic/ckeditor.js"></script>

<script src="~/admin/vertical/assets/js/jquery.min.js"></script>
<script src="~/admin/plugins/jquery-ui/jquery-ui.min.js"></script>




<script type="text/javascript">
    docReady(function () {
        var myEditor = null;
        // DOM is loaded and ready for manipulation here
        ClassicEditor
            .create(document.querySelector("#Content"), {
                height: 400,
                Toolbar: { //Set the toolbar
                    items: [
                        'heading',
                        '|',
                        'bold',
                        'italic',
                        'code',
                        'underline',
                        'link',
                        'bulletedList',
                        'numberedList',
                        'imageUpload',
                        'blockQuote',
                        'insertTable',
                        //'mediaEmbed',
                        'undo',
                        'redo',
                        
                    ]
                },
                extraPlugins: [MyCustomUploadAdapterPlugin]
            })
            .then(editor => {
                myEditor = editor;

            })
            .catch(error => {
                console.error(error);
            });

    });

    function docReady(fn) {
        // see if DOM is already available
        if (document.readyState === "complete" || document.readyState === "interactive") {
            // call on next available tick
            setTimeout(fn, 1);
        } else {
            document.addEventListener("DOMContentLoaded", fn);
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }

    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload.
            this.loader = loader;
        }

        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '/Admin/UploadCKEditorImage', true);
            // xhr.open('POST', 'https://localhost:7298/api/Article/UploadCKEditorImage', true);

            xhr.responseType = 'json';
        }

        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                resolve({
                    default: response.url
                });
            });

            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        _sendRequest(file) {
            const data = new FormData();
            data.append('upload', file);
            this.xhr.send(data);
        }
    }







</script>





@* <script>
    $(document).ready(function () {
        var selectedTags = [];

        // Form submit olayı dinleyicisi
        $("form").submit(function (event) {

            event.preventDefault();
            

            // Seçilen tagların ID'lerini alın
            var tagIDs = selectedTags.map(function (tag) {
                return tag.value; // "value" kullanıldı
            });

            console.log("IDler");
            console.log(tagIDs);

            // API'den en son makalenin ID'sini alın
            $.ajax({
                url: "https://localhost:7298/api/Article/GetLastArticles",
                type: "GET",
                dataType: "json",
                success: function (response) {
                    var lastArticleID = response.articleID;
                    console.log("En son makale ID'si:", lastArticleID);
                    // API'ye göndermek için bir POST isteği yapın
                    $.ajax({
                        url: "https://localhost:7298/api/Tag",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ articleID: 55, tagID: tagIDs }),
                        success: function (response) {
                            console.log("Başarıyla gönderildi:", response);
                            // Formu normal şekilde gönderin
                            $("#form").unbind('submit').submit();
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.log("Hata:", errorThrown);
                        }
                    });
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("Hata:", errorThrown);
                }
            });
        });

        // AJAX isteği ile tagları alın
        $.ajax({
            url: "https://localhost:7298/api/Tag",
            type: "GET",
            dataType: "json",
            success: function (data) {
                console.log("API'den gelen veriler:");
                console.log(data);

                // Etiketleri uygun formatta düzenle
                var availableTags = data.map(function (tag) {
                    return {
                        label: tag.name,
                        value: tag.tagID
                    };
                });

                console.log(availableTags);

                // Input alanına otomatik tamamlama eklemek
                $("#tags").autocomplete({
                    source: availableTags,
                    select: function (event, ui) {
                        // Seçilen etiketi diziye ekleyin
                        selectedTags.push(ui.item);
                        console.log("Seçilen etiketler:");
                        console.log(selectedTags);

                        // Seçilen etiketleri göstermek için div'e ekleme yapın
                        $("#selectedTagsContainer").empty();
                        selectedTags.forEach(function (tag) {
                            var tagDiv = $("<div>").addClass("selected-tag").text(tag.label); // "label" kullanıldı
                            var removeIcon = $("<span>").addClass("remove-icon").text("x").click(function () {
                                // Etiketi listeden çıkarın ve div'den kaldırın
                                var index = selectedTags.indexOf(tag);
                                if (index > -1) {
                                    selectedTags.splice(index, 1);
                                    tagDiv.remove();
                                }
                            });
                            tagDiv.append(removeIcon);
                            $("#selectedTagsContainer").append(tagDiv);
                        });
                    }
                });
            },
            error: function (xhr, textStatus, errorThrown) {
                console.log("Error: ", errorThrown);
            }
        });
    });

    </script> *@